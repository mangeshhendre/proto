syntax = "proto3";

package services.assignment.v2;

option go_package = "golang.sgpdev.com/models/services_assignment_v1";

import "google/protobuf/wrappers.proto";

service ServiceArea {
    rpc Assign (AssignRequest) returns (AssignResponse);
    rpc ForceAssign (AssignRequest) returns (AssignResponse);
    rpc Reassign(ReassignRequest) returns (AssignResponse)
    rpc ReassignIf(ReassignIfRequest) returns (AssignResponse)
}

message ReassignRequest{
    int64  order_number = 1;
    string vendor_code = 2;
}

message ReassignIfRequest{
    int64  order_number = 1;
    string vendor_code = 2;
    string current_vendor_code = 3;
}

enum Reason {
    unknown = 0; // Uninitialized.
    success = 1; // Success
    cap = 2; // Retry per normal
    no_vendors = 3; // Retry per normal
    stop = 4; // Stop retrying. <- new, but we do not know if needed.
}

message AssignRequest {
    int64 order_number = 1; // The externally available work ordernumber (WorkOrder.Order_Number)
    string network = 2;      /* Currently equivalent to department, some variations exist
                                TODO(Val):Identify variations.
                             */
    string client_code = 3;  // The string representation of the client code.
    string vendor_code = 4;  // Optional vendor to be preferred/selected for forced assignment.
    Address address = 5;     // Address object.
    // Pricing concers?
    // Bids.
    // Tasks.
}

message AssignResponse {
    bool success = 1; // True == we have a recommendation, false means no such luck.
    Reason failure_reason = 2;
    string vendor = 3; // The vendor code that SPIGlass should record.
}

message Address {
    string address1 = 1;
    string address2 = 2;
    string city = 3;
    string zip_code = 4;
    string state = 5;
}