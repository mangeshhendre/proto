syntax = "proto3";

package sgt.queue.v1;

option go_package = "golang.sgpdev.com/models/sgt_queue_v1";

import "google/protobuf/timestamp.proto";

enum ProcessStatus {
    unknown = 0; // indicates an uninitialized value.
    success = 1; // Indicates that the item processed successfully.  Means to Ack.
    failed = 2; // Indicates that the item failed to process successfully.  Means to Nack
    retry = 3; // Indicates that the item failed to process successfully.  Means to Nack, but try to provide advice to retry
    skipped = 4; // Indicates that the item failed to process successfully.  Means to Ack
    duplicate = 6;   // The item processed successfull, but we detected it was a duplicate.  Means to Ack, but we did not process.
    system_failed = 7;   // The problem was not with the processing, but something else systemically.  Essentially a Nack that doesnt increase retries.
}

message Item {
	int64 id = 1; // The queue item id.  This is unique per database instance, but not unique globally.
	string queue_name = 2; // The queue item id.  This is unique per database instance, but not unique globally.
    string status = 3; // The string representation of the state.
    int64 retries = 4; // How many times this has been attempted
	google.protobuf.Timestamp create_date = 5; // The create date stored in the database.
	google.protobuf.Timestamp update_date = 6; // The last modified date from the database.
    int64 age = 7; // The age of the item in seconds.
    string body = 8; // The body of the request.   This is the nvl or coalesce of the queue_item or the clob.
    ProcessStatus process_status = 9;
    string message = 10;
    int64 get_time = 11; // time in unix nanoseconds.
    int64 process_time = 12; // time in unix nanoseconds.
    int64 ack_time = 13; // time in unix nanoseconds.
}

message GetRequest {
    string queue_name = 1; // Which queue to retrieve from.
    int64 count = 2; // The number that we are requesting.
}

message GetResponse {
    repeated Item items = 1;
}

message ProcessRequest {
    Item item = 1;
}

message ProcessResponse {
    Item item = 1;
}
